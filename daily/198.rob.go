package daily

// 198. 打家劫舍
// 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
// 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。
// 示例 1：
// 输入：[1,2,3,1]
// 输出：4
// 解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
//      偷窃到的最高金额 = 1 + 3 = 4 。
// @lc: https://leetcode-cn.com/problems/house-robber/

// 方法一：动态规划，二维数组
// dp状态定义：dp[i][j] j有2种状态，0:第i个房子不偷，1:第i个房子偷
// dp转移方程：
//	dp[i][0] = max(dp[i-1][0], dp[i-1][1]), 第i个房子不偷，那么i-1个房子可偷可不偷直接转移过来，返回二者较大值
//	dp[i][1] = , 第i个房子偷，那么i-1个房子就不能偷了，返回i-1不偷加上i的金额
// 最终结果：max(dp[n-1][0], dp[n-1][1])
// 时间复杂度：O(n)
// 空间复杂度：O(2n) -> O(n) 忽略常数2
func rob1(nums []int) int {
	n := len(nums)
	if n == 0 {
		return 0
	}

	// dp状态定义
	dp := make([][2]int, n)
	// 初始化
	dp[0] = [2]int{0, nums[0]}
	// 递推
	for i := 1; i < n; i++ {
		dp[i][0] = max(dp[i-1][0], dp[i-1][1])
		dp[i][1] = dp[i-1][0] + nums[i]
	}
	return max(dp[n-1][0], dp[n-1][1])
}

// 方法二：动态规划，一位数组
// dp状态定义：dp[i] 表示第i个房子可偷可不偷的最大收益
// dp转移方程：dp[i] = max(dp[i-1]+0, dp[i-2]+nums[i])，
//	dp[i-1]+0：表示第i个房子不偷，那么可以直接从第i-1个房子的最大值赋过来
// 	dp[i-2]+nums[i]：表示第i个房子偷，那么就不能从i-1的最大值赋过来了，而是从第i-2个房子的最大值赋过来，同时加上第i个房子的金额，
// 以上2种求最大值，就是第0..i个房子的最大值
// 最终结果：dp[n-1]
// 时间复杂度：O(n)
// 空间复杂度：O(n)
func rob2(nums []int) int {
	n := len(nums)
	if n == 0 {
		return 0
	}
	if n == 1 {
		return nums[0]
	}

	// dp状态定义
	dp := make([]int, n)
	// dp[i]存的是0..i的最大值，dp[0]：第一个房子最大值，那肯定是nums[0]；dp[1]：第1和2房子是相邻的只能偷一个，所以偷二者较大值
	dp[0], dp[1] = nums[0], max(nums[0], nums[1])
	for i := 2; i < n; i++ {
		dp[i] = max(dp[i-1], dp[i-2]+nums[i])
	}
	return dp[n-1]
}
