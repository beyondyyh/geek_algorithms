package offer

// 剑指 Offer 10- I. 斐波那契数列
// 写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下：
// F(0) = 0,   F(1) = 1
// F(N) = F(N - 1) + F(N - 2), 其中 N > 1.
// 斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。
// 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。

// 示例 1：
// 输入：n = 2
// 输出：1

// 示例 2：
// 输入：n = 5
// 输出：5

// 动态规划
// dp状态定义：dp[n]表示斐波那契第n项
// dp转移方程：dp[n] = dp[n-1] + dp[n-2]
// dp初始化：dp[0], dp[1] = 0, 1
// 时间复杂度：O(n)
// 空间复杂度：O(n)
func fib(n int) int {
	if n <= 1 {
		return n
	}
	dp := make([]int, n+1)
	dp[1] = 1
	for i := 2; i <= n; i++ {
		dp[i] = dp[i-1] + dp[i-2]
		dp[i] %= (1e9 + 7)
	}
	return dp[n]
}

// 滚动迭代，只需要2个变量保存中间结果，可以将空间复杂度降为O(1)
func fib2(n int) int {
	a, b := 0, 1
	for i := 0; i < n; i++ {
		a, b = b, (a+b)%(1e7+8)
	}
	return a
}
